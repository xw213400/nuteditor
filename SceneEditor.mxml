<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="960" height="640" showStatusBar="false" 
					   xmlns:ui="scene.ui.*" backgroundAlpha="0"
					   minWidth="300" minHeight="200" frameRate="60"
					   resize="onResize(event)" addedToStage="addedToStageHandler(event)"
					   creationComplete="onCreationComplete(event)">
	<fx:Script>
		<![CDATA[
			import common.command.CommandChannel;
			import common.command.CommandConst;
			import common.ui.DlgBaseUrl;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import nut.core.Nut;
			import nut.enum.ResType;
			import nut.util.Monitor;
			
			import scene.command.Command;
			import scene.logic.World3D;
			import scene.ui.DlgAddTerrain;
			import scene.ui.DlgSceneName;
			
			[Bindable]
			private var _menuData:XMLListCollection = new XMLListCollection(
				<>
				<menuitem label="场景">
					<menuitem label="新建" data="create_scene"/>
					<menuitem label="打开" data="open_scene"/>
					<menuitem label="保存" data="save_scene"/>
				</menuitem>
				<menuitem label="添加">
					<menuitem label="地形" data="add_terrain"/>
				</menuitem>
				</>);
			
			[Bindable]
			private var _tabData:ArrayCollection = new ArrayCollection([]);
			
			private function menuHandler(evt:MenuEvent):void
			{ 
				if (evt.item.@data == "create_scene")
					create_scene();
				else if (evt.item.@data == "open_scene")
					open_scene();
				else if (evt.item.@data == "save_scene")
					save_scene();
				else if (evt.item.@data == "add_terrain")
					add_terrain();
			}
			
			private function create_scene():void
			{
				var rootSceneFolder :File = new File(Nut.resMgr.baseUrl+'scene/');
				if (!rootSceneFolder.exists)
				{
					rootSceneFolder.createDirectory();
					var textureFolder:File = rootSceneFolder.resolvePath("texture/");
					textureFolder.createDirectory();
				}
				
				var dlgSceneName :DlgSceneName = new DlgSceneName();
				PopUpManager.addPopUp(dlgSceneName, this, true);
				PopUpManager.centerPopUp(dlgSceneName);
			}
			
			private function open_scene():void
			{
				var file :File = new File(Nut.resMgr.baseUrl+'scene/');
				file.addEventListener(Event.SELECT, onSelectScene);
				file.browseForOpen("选择地形文件");
			}
			
			private function onSelectScene(evt:Event):void
			{
				var file:File = evt.target as File;
				var path :String = Nut.resMgr.solveName(file.url, ResType.SCENE);
				
				World3D.instance.openScene(path);
			}
			
			private function onOpenSceneComplete():void
			{
				if (World3D.instance.gameScene.nav != null)
				{
					if (!tabItemExist('导航'))
						_tabData.source.unshift('导航');
				}
				
				if (World3D.instance.gameScene.terrain != null)
				{
					if (!tabItemExist('地形'))
						_tabData.source.unshift('地形');
				}
				
				if (!tabItemExist('全局'))
					_tabData.source.unshift('全局');
				
				_tabData.refresh();
			}
			
			private function tabItemExist(item:String):Boolean
			{
				var len:int = _tabData.source.length;
				for(var i:int=0; i!=len; ++i)
				{
					if (_tabData.source[i] == item)
						return true;
				}
				
				return false;
			}
			
			private function save_scene():void
			{
				if (World3D.instance.gameScene != null)
					World3D.instance.saveScene();
				else
					Alert.show("没有正在编辑的场景!");
			}
			
			private function onCreateSceneNameOK(sceneName:String):void
			{
				sceneName+=".scn";
				
				var sceneFolder :File = new File(Nut.resMgr.getResUrl(ResType.SCENE)+ sceneName);
				
				if (!sceneFolder.exists)
				{
					World3D.instance.createScene(sceneName);
					
					if (!tabItemExist('全局'))
						_tabData.source.unshift('全局');
					_tabData.refresh();
				}
				else
				{
					Alert.show("已经存在场景"+sceneName+"!");
				}
			}

			private function add_terrain():void
			{
				if (World3D.instance.gameScene == null || World3D.instance.gameScene.terrain != null)
				{
					Alert.show("添加失败!");
					return;
				}
				
				var dlgAddTerrain:DlgAddTerrain = new DlgAddTerrain();
				PopUpManager.addPopUp(dlgAddTerrain, this, true);
				PopUpManager.centerPopUp(dlgAddTerrain);
			}
			
			private function checkScene():Boolean
			{
				if (World3D.instance.gameScene == null)
				{
					Alert.show("添加失败!");
					return false;
				}
				var sceneFolder :File = new File(Nut.resMgr.baseUrl+'scene/'+ World3D.instance.gameScene.name+"/");
				if (!sceneFolder.exists)
				{
					Alert.show("场景不存在!");
					return false;
				}
				return true;
			}
			
			private function onSettingsOK(workFolder:String):void
			{
				var iniFile :File = File.applicationStorageDirectory.resolvePath("nut/SceneEditor.ini");;
				var fs:FileStream = new FileStream();
				fs.open(iniFile, FileMode.WRITE);
				fs.position = 0;
				fs.writeUTF(workFolder);
				fs.close();
				
				createWorld3D(workFolder);
			}
			
			private function onAddTerrainOK(x_count:int, z_count:int):void
			{
				World3D.instance.createTerrain(x_count, z_count);
				
				if (World3D.instance.gameScene.terrain != null)
				{
					if (!tabItemExist('地形'))
						_tabData.source.unshift('地形');
					_tabData.refresh();
				}
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				CommandChannel.instance.bindHandler(CommandConst.DlgBaseUrl_OK, onSettingsOK);
				CommandChannel.instance.bindHandler(Command.SceneEditor_SCENE_NAME_OK, onCreateSceneNameOK);
				CommandChannel.instance.bindHandler(Command.SceneEditor_TERRAIN_SETTING_OK, onAddTerrainOK);
				CommandChannel.instance.bindHandler(Command.SceneEditor_OPEN_SCENE_OK, onOpenSceneComplete);
				
				hideAll();
			}
			
			protected function addedToStageHandler(event:Event):void
			{
				var iniFile :File = File.applicationStorageDirectory.resolvePath("nut/SceneEditor.ini");
				if (iniFile.exists)
				{
					var fileStream :FileStream = new FileStream();
					fileStream.addEventListener(Event.COMPLETE, onSettingsFileComplete);
					fileStream.openAsync(iniFile, FileMode.READ);
				}
				else
				{
					var dlgSettings :DlgBaseUrl = new DlgBaseUrl();
					PopUpManager.addPopUp(dlgSettings, this, true);
					PopUpManager.centerPopUp(dlgSettings);
				}
			}
			
			private function onSettingsFileComplete(evt:Event):void
			{
				var data:ByteArray = new ByteArray();
				var fileStream :FileStream = evt.target as FileStream;
				
				fileStream.readBytes(data, 0, fileStream.bytesAvailable);
				fileStream.close();
				
				createWorld3D(data.readUTF());
			}
			
			private function createWorld3D(workFolder:String):void
			{
				new World3D(workFolder, stage, mouseArea);
				uiWorld3D.addChild(Nut.scene.viewport.sprite);
				Nut.scene.viewport.resetPosition(uiWorld3D.x, uiWorld3D.y);
				
				stage.addChildAt(Monitor.instance, 0);
				Monitor.instance.x = 260;
				Monitor.instance.y = 20;
			}
			
			protected function onResize(event:ResizeEvent):void
			{
				if (!stage)
					return;
				
				mouseArea.width = uiWorld3D.width = stage.stageWidth-260;
				mouseArea.height= uiWorld3D.height= stage.stageHeight-20;
				World3D.instance.resize(mouseArea.width, mouseArea.height);
			}
			
			private function hideAll():void
			{
				dlgTerrain.show(false);
				dlgGlobal.show(false);
			}
			
			private function changeSelection(event:Event):void
			{
				hideAll();
				
				if (event.target.selectedItem == '地形')
				{
					dlgTerrain.show(true);
				}
				else if (event.target.selectedItem == '全局')
				{
					dlgGlobal.show(true);
				}
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<mx:MenuBar width="100%" height="20" dataProvider="{_menuData}" labelField="@label" itemClick="menuHandler(event)"/>
	<s:Group x="260" y="20" width="700" height="620" id="mouseArea"/>
	<mx:UIComponent x="260" y="20" width="700" height="620" id="uiWorld3D"/>
	<s:TabBar id="tabBar" y="20" width="260" height="20" dataProvider="{_tabData}" change="changeSelection(event)" valueCommit="changeSelection(event)"/>
	<ui:DlgTerrain y="40" width="260" height="600" id="dlgTerrain"/>
	<ui:DlgGlobal y="40" width="260" height="600" id="dlgGlobal"/>
</s:WindowedApplication>
