<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:custom="common.ui.custom.*"
		 width="260" height="246" 
		 creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import scene.logic.Brush;
			import scene.logic.TerrainWireFrame;
			import scene.logic.World3D;
			import scene.scene.terrain.TerrainEd;
			
			[Bindable]
			private var _surfaces:ArrayCollection = new ArrayCollection( 
				[
					{label:"1",	data:0},  
					{label:"2",	data:1},  
					{label:"3",	data:2},
					{label:"4",	data:3}
				]);
			
			[Bindable]
			private var _showModeData:ArrayCollection = new ArrayCollection( 
				[
					{label:"地形",	data:0},  
					{label:"网格",	data:1},  
					{label:"隐藏",	data:2}
				]);
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				bt0.source = Brush.instance.getTemplate('bt0');
				bt1.source = Brush.instance.getTemplate('bt1');
				bt2.source = Brush.instance.getTemplate('bt2');
				
				combo_surface.textInput.editable = false;
				showMode.textInput.editable = false;
				showImageChoosed('bt0');
				
				stepHeight.text = "0";
			}
			
			protected function imageHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var brush:String = event.currentTarget.id;
				
				Brush.instance.brush = brush;
				showImageChoosed(brush);
			}
			
			private function showImageChoosed(brush:String):void
			{
				bt0.scaleX = 1.0;
				bt0.scaleY = 1.0;
				bt1.scaleX = 1.0;
				bt1.scaleY = 1.0;
				bt2.scaleX = 1.0;
				bt2.scaleY = 1.0;
				btc.scaleX = 1.0;
				btc.scaleY = 1.0;
				
				if (brush == 'bt0')
				{
					bt0.scaleX = 1.1;
					bt0.scaleY = 1.1;
				}
				else if (brush == 'bt1')
				{
					bt1.scaleX = 1.1;
					bt1.scaleY = 1.1;
				}
				else if (brush == 'bt2')
				{
					bt2.scaleX = 1.1;
					bt2.scaleY = 1.1;
				}
				else if (brush == 'btc')
				{
					btc.scaleX = 1.1;
					btc.scaleY = 1.1;
				}
			}
			
			private function brushModeHandler(event:MouseEvent):void
			{
				var mode:int = event.target.value;
				Brush.instance.mode = mode;
			}
			
			private function brushMethodHandler(event:MouseEvent):void
			{
				var method:int = event.target.value;
				Brush.instance.method = method;
			}
			
			protected function onSizeChange(event:Event):void
			{
				Brush.instance.size = size.value;
				sx_text.text = size.value.toPrecision(3);
			}
			
			protected function onStrengthChange(event:Event):void
			{
				Brush.instance.strength = strength.value;
				strength_text.text = strength.value.toPrecision(3);
			}
			
			protected function enabledChanged(event:Event):void
			{
				Brush.instance.enabled = enable.selected;
			}
			
			protected function onSurfaceChanged(event:Event):void
			{
				Brush.instance.surfaceIdx = ComboBox(event.target).selectedItem.data;
			}
			
			protected function onShowModeChanged(event:Event):void
			{
				var terrain:TerrainEd = World3D.instance.gameScene.terrain as TerrainEd;
				
				var mode:int = ComboBox(event.target).selectedItem.data;
				if (mode == 0)
				{
					terrain.showChunks(true);
					TerrainWireFrame.instance.showGrid(false, false);
				}
				else if (mode == 1)
				{
					terrain.showChunks(false);
					TerrainWireFrame.instance.showGrid(true, false);
				}
				else if (mode == 2)
				{
					terrain.showChunks(false);
					TerrainWireFrame.instance.showGrid(false, false);
				}
			}
			
			protected function changeStepHeight(event:Event):void
			{
				Brush.instance.stepHeight = event.target.text;
			}
			
			protected function onChooseTexture(e:Event):void
			{
				var file:File = new File();
				file.browseForOpen("选择刷子",  [new FileFilter("图片文件(*.png;*.jpg)","*.png;*.jpg")]);
				file.addEventListener(Event.SELECT, onSelect);
			}
			
			public function onSelect(e:Event):void
			{
				var path:String = (e.target as File).nativePath;
				var loader : URLLoader = new URLLoader();
				
				loader.dataFormat = URLLoaderDataFormat.BINARY;
				loader.addEventListener(Event.COMPLETE, onLoadURLComplete);
				loader.load(new URLRequest(path));
			}
			
			private function onLoadURLComplete(evt:Event):void
			{
				var bytes:ByteArray = evt.currentTarget.data;
				var loader :Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadBytesComplete);
				loader.loadBytes(bytes);
			}
			
			private function onLoadBytesComplete(e:Event):void
			{
				var displayObject :DisplayObject = LoaderInfo(e.currentTarget).content;
				var bitmap:Bitmap = displayObject as Bitmap;
				if (bitmap != null)
				{
					Brush.instance.setCustomTemplate(bitmap.bitmapData);
					btc.source = Brush.instance.getTemplate('btc');
				}
			}
			
			protected function onBrushColorChanged(e:Event):void
			{
				Brush.instance.color = e.target.selectedColor;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="brushMode"/>
		<s:RadioButtonGroup id="brushMethod"/>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<mx:Canvas width="100%" height="246" backgroundColor="#FFFFFF">
		<s:Label width="100%" height="20" backgroundColor="#D2E8F4" text="刷子" textAlign="center"
				 verticalAlign="middle"/>
		<s:Image id="bt0" x="10" y="135" width="32" height="32" buttonMode="true" mouseDown="imageHandler(event)"/>
		<s:Image id="bt1" x="48" y="135" width="32" height="32" buttonMode="true" mouseDown="imageHandler(event)"/>
		<s:Image id="bt2" x="86" y="135" width="32" height="32" buttonMode="true" mouseDown="imageHandler(event)"/>
		<s:Image id="btc" x="201" y="135" width="32" height="32" buttonMode="true" mouseDown="imageHandler(event)" backgroundColor="0x000000"/>
		<custom:NoWheelHSlider id="size" x="48" y="77" width="160" maximum="128" minimum="1" stepSize="1"
							   value="16" change="onSizeChange(event)"/>
		<s:Label x="10" y="77" text="size"/>
		<s:HGroup x="50" y="24">
			<s:RadioButton label="高度" value="1" groupName="brushMode" click="brushModeHandler(event)" selected="true"/>
			<s:RadioButton label="混合" value="2" groupName="brushMode" click="brushModeHandler(event)"/>
			<s:RadioButton label="颜色" value="3" groupName="brushMode" click="brushModeHandler(event)"/>
			<s:RadioButton label="高光" value="4" groupName="brushMode" click="brushModeHandler(event)"/>
		</s:HGroup>
		<s:HGroup x="50" y="46">
			<s:RadioButton label="上升" value="1" groupName="brushMethod" click="brushMethodHandler(event)" selected="true"/>
			<s:RadioButton label="下降" value="2" groupName="brushMethod" click="brushMethodHandler(event)"/>
			<s:RadioButton label="平滑" value="3" groupName="brushMethod" click="brushMethodHandler(event)"/>
			<s:RadioButton label="整平" value="4" groupName="brushMethod" click="brushMethodHandler(event)"/>
		</s:HGroup>
		<mx:ColorPicker id="brush_color" x="10" y="214" change="onBrushColorChanged(event)"
						selectedColor="#FFFFFF"/>
		<s:Label x="11" y="29" text="对象"/>
		<s:Label x="11" y="50" text="类型"/>
		<s:Label id="sx_text" x="217" y="76" text="16.0"/>
		<s:Button x="136" y="140" width="59" label="自定义" click="onChooseTexture(event)"/>
		<s:CheckBox id="enable" x="63" y="216" label="生效" change="enabledChanged(event)"/>
		<custom:NoWheelHSlider id="strength" x="49" y="95" width="160" maximum="5" minimum="0.1" stepSize="0.1"
							   value="0.5" change="onStrengthChange(event)"/>
		<s:Label x="10" y="95" text="强度"/>
		<s:Label id="strength_text" x="217" y="95" text="0.5"/>
		<s:ComboBox id="combo_surface" x="183" y="182" width="59" close="onSurfaceChanged(event)"
					dataProvider="{_surfaces}" selectedIndex="1"/>
		<s:Label x="131" y="188" text="选择地表"/>
		<s:Label x="10" y="187" text="台阶高度"/>
		<s:TextInput id="stepHeight" x="64" y="182" width="50" change="changeStepHeight(event)" restrict="0-9 . \-"/>
		<s:ComboBox id="showMode" x="183" y="213" width="59" dataProvider="{_showModeData}" selectedIndex="0" 
					close="onShowModeChanged(event)"/>
		<s:Label x="130" y="219" text="显示状态"/>
	</mx:Canvas>
</s:Group>
